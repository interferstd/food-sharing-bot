const { Scene, Markup } = require("./Scenes");
const keyboardKeys = [
  ["–ú—è—Å–æüçó", "–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ãüçè"],
  ["–û–≤–æ—â–∏üçÜ", "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ãü•õ"],
  ["–õ–µ–∫–∞—Ä—Å—Ç–≤–∞üíä", "–°–ª–∞–¥–∫–æ–µüç¨"],
  ["–ö—Ä—É–ø—ãüçö", "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µüßä"],
  ["–ù–∞–ø–∏—Ç–∫–∏üçπ", "–î–µ—Ç—Å–∫–æ–µüë∂üèª"],
  ["–í—ã–ø–µ—á–∫–∞üçû", "–î—Ä—É–≥–æ–µü§∑‚Äç"],
  ["–ù–∞–∑–∞–¥‚Ü©", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úâ"]
];

new (class GiveFood extends Scene {
  constructor() {
    super("GiveFood");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    ctx.session.product = {
      _id: undefined, // ID –ø—Ä–æ–¥—É–∫—Ç–∞
      authId: ctx.from.id,
      name: null, // –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      photos: [], // –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      category: [],
      burnTime: null,
      location: {},
      isReserved: false,
      city: null
    };
    await ctx.reply(
      '–¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Çüçè', Markup.keyboard("–ù–∞–∑–∞–¥‚Ü©")
    );
    await ctx.scene.enter("NameQuery");
  }
  onText(ctx){
    if(ctx.message.text==="–ù–∞–∑–∞–¥"){
      ctx.scene.enter("Main")
    }
  }
})();

new (class NameQuery extends Scene {
  constructor() {
    super("NameQuery");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞üçΩ",
      Markup.keyboard(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú", "–ù–∞–∑–∞–¥‚Ü©"])
        .oneTime()
        .resize()
        .extra()
    );
  }
  async onText(ctx) {
    switch (ctx.message.text) {
      case "–ù–∞–∑–∞–¥‚Ü©":
        ctx.session.product.photos = null;
        await ctx.scene.enter("Main");
        break;
      case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú":
        ctx.scene.enter("PhotoQuery")
      default:
        ctx.session.product.name = ctx.message.text;
        await ctx.scene.enter("PhotoQuery");
        break;
    }
  }
})();

new (class PhotoQuery extends Scene {
  constructor() {
    super("PhotoQuery");
    super.struct = {
      on: [
        ["text", this.onText],
        ["photo", this.onPhoto]
      ],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply(
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç 1 –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞üñº",
      Markup.keyboard(["–ó–∞–≥—Ä—É–∑–∏—Ç—åüíø", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú", "–ù–∞–∑–∞–¥‚Ü©"])
        .oneTime()
        .resize()
        .extra()
    );
  }
  async onText(ctx) {
    const { product } = ctx.session;
    switch (ctx.message.text) {
      case "–ù–∞–∑–∞–¥‚Ü©":
        await ctx.scene.enter("NameQuery");
        product.photos = [];
        break;
      case "–ó–∞–≥—Ä—É–∑–∏—Ç—åüíø":
        if (product.photos.length > 0 && product.photos.length < 10) {
          await ctx.scene.enter("CategoryQuery");
        } else {
          await ctx.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–πüòñ");
          //  –û—á–∏—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞ —Å —Ñ–æ—Ç–∫–∞–º–∏
          product.photos = [];
          await ctx.scene.reenter();
        }
        break;
      case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú":
        await ctx.scene.enter("CategoryQuery")
    }
  }
  async onPhoto(ctx) {
    const { product } = ctx.session; //  –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–µ—à–∞
    product.authId = ctx.from.id; //  Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product.photos = product.photos || [];
    const file_id = ctx.message.photo.pop().file_id;
    const link = await ctx.telegram.getFileLink(file_id);
    product.photos.push({ id: file_id, url: link }); //  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π –≥—Ä–∞—Ñ–æ–Ω–∏—Å—Ç–æ—Ä–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  }
})();

new (class CategoryQuery extends Scene {
  constructor() {
    super("CategoryQuery");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üç∞\n\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å\"",
        Markup.keyboard(keyboardKeys)
            .resize()
            .extra()
    );
  }
  async onText(ctx) {
    if ([].concat(...keyboardKeys.slice(0, -1)).includes(ctx.message.text)) {
      if(ctx.session.product.category.includes(ctx.message.text)){
        ctx.session.product.category = ctx.session.product.category.filter(elm=>elm!==ctx.message.text);
        ctx.reply("–ö–∞—Ç–∞–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        console.log(ctx.session.product.category)
      } else {
        ctx.session.product.category.push(ctx.message.text);
        ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        console.log(ctx.session.product.category)
      }
    } else if (ctx.message.text === "–ù–∞–∑–∞–¥‚Ü©") {
      ctx.session.product.category = [];
      await ctx.scene.enter("PhotoQuery");
    } else if(ctx.message.text==="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úâ"){
      await ctx.scene.enter("TakeTimeQuery");
    }
  }
})();

new (class TakeTimeQuery extends Scene {
  constructor() {
    super("TakeTimeQuery");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }

  async enter(ctx) {
    await ctx.reply(
        "–í —Ç–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–∏ —á–∞—Å–æ–≤ –∑–∞–±—Ä–∞—Ç—å –µ–¥—É?‚è∞",
        Markup.keyboard(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú", "–ù–∞–∑–∞–¥‚Ü©"])
        .oneTime()
        .resize()
        .extra()
    );
  }
  async onText(ctx) {
    let time = new Date();
    if (Number(ctx.message.text) > 0) {
      time.setHours(time.getHours() + ctx.message.text);
      ctx.session.product.burnTime = time;
      ctx.scene.enter("CommentaryQuery");
    } else if(ctx.message.text==="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú") {
      time.setHours(time.getHours() + 48);
      await ctx.reply("–í—ã—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è: 48 —á–∞—Å–æ–≤")
      await ctx.scene.enter("CommentaryQuery")
    } else if (ctx.message.text==="–ù–∞–∑–∞–¥‚Ü©"){
      ctx.session.product.burnTime = null;
      await ctx.scene.enter("CategoryQuery")
    } else {
      await ctx.reply("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ωüòû");
    }
  }
})();

new (class CommentaryQuery extends Scene {
  constructor() {
    super("CommentaryQuery");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–πüìÉ",
      Markup.keyboard(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú", "–ù–∞–∑–∞–¥‚Ü©"])
        .oneTime()
        .resize()
        .extra()
    );
  }
  async onText(ctx) {
    const { product } = ctx.session;
    switch (ctx.message.text) {
      case "–ù–∞–∑–∞–¥‚Ü©":
        product.commentary = null;
        await ctx.scene.enter("TakeTimeQuery");
        break;
      case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú":
        await ctx.scene.enter("TakeTimeQuery")
    }
    if (ctx.message.text) {
      product.commentary = ctx.message.text;
      await ctx.scene.enter("locationQuery");
    }
  }
})();

new (class locationQuery extends Scene {
  constructor() {
    super("locationQuery");
    super.struct = {
      on: [
        ["text", this.onText],
        ["location", this.onLocation]
      ],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply(
      "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–µ–æ–º–µ—Ç–∫—Éüåç",
      Markup.keyboard(["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—éüåê", "–ù–∞–∑–∞–¥‚Ü©"])
        .oneTime()
        .resize()
        .extra()
    );
  }
  async onLocation(ctx) {
    ctx.session.product.location = ctx.message.location;
    await ctx.scene.enter("Main");
  }
  async onText(ctx) {
    switch (ctx.message.text) {
      case "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—éüåê":
        const user = await ctx.base.get("config", {_id: ctx.from.id});
        ctx.session.product.location = user[0].location;
        ctx.session.product.city = user[0].city;
        const newProduct = await ctx.base.set("product", ctx.session.product);
        global.Controller.emit("newProduct", newProduct);
        await ctx.scene.enter("Main");
        break;
      case "–ù–∞–∑–∞–¥‚Ü©":
        ctx.session.product.location = {};
        await ctx.scene.enter("CommentaryQuery");
        break;
    }
  }
})();
