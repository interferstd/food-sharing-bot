const { Scene, Markup, Extra } = require("./Scenes");

new (class Start extends Scene {
  constructor() {
    super("Start");
    super.struct = {
      enter: [[this.enter]]
    };
  }

  async enter(ctx) {
    if ((await ctx.base.get("config", { _id: ctx.from.id }).length) !== 0) {
      await ctx.scene.enter("Main");
      return;
    }
    ctx.session.baseConfig = {
      _id: null, // user.id
      radius: null,
      alerts: true,
      name: null,
      city: null,
      location: null,
      preferences: {
        –ú—è—Å–æ: true,
        "–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ã": true,
        –û–≤–æ—â–∏: true,
        "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": true,
        –õ–µ–∫–∞—Ä—Å—Ç–≤–∞: true,
        –°–ª–∞–¥–∫–æ–µ: true,
        –ö—Ä—É–ø—ã: true,
        –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ: true,
        –ù–∞–ø–∏—Ç–∫–∏: true,
        –î–µ—Ç—Å–∫–æ–µ: true,
        –í—ã–ø–µ—á–∫–∞: true,
        –î—Ä—É–≥–æ–µ: true
      }
    };
    await ctx.reply(
      "üõ†–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüõ†\n–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤ –±—É–¥—É—â–µ–º"
    );
    //TODO: redirect –Ω–∞ main
    // await ctx.scene.enter("Main");
    await ctx.scene.enter("getStartUserRadius");
  }
})();

new (class getStartUserRadius extends Scene {
  constructor() {
    super("getStartUserRadius");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Öüìè");
  }
  async onText(ctx) {
    if ((Number(ctx.message.text) > 0)  && (ctx.message.text<100)) {
      ctx.session.baseConfig.radius = ctx.message.text;
      await ctx.scene.enter("getStartUserCity");
    } else {
      ctx.reply("‚ùó‚ùó‚ùó–†–∞–¥–∏—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 100‚ùó‚ùó‚ùó")
    }
  }
})();

//TODO: –≤ –±—É–¥—É—â–µ–º —É–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Api –∫–∞—Ä—Ç
new (class getStartUserCity extends Scene {
  constructor() {
    super("getStartUserCity");
    super.struct = {
      on: [["text", this.onText]],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥üèô");
  }
  async onText(ctx) {
    ctx.session.baseConfig.city = ctx.message.text;
    await ctx.scene.enter("getStartUserLocation");
  }
})();

new (class getStartUserLocation extends Scene {
  constructor() {
    super("getStartUserLocation");
    super.struct = {
      on: [
        ["location", this.onLocation],
        ["text", this.onText]
      ],
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüåç", Extra.markup((markup)=>{
      return markup.oneTime().resize().keyboard([
          markup.locationRequestButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úÖ"),
          "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîú"
      ])
    }));
  }
  async onText(ctx) {
    // Todo: –ï—Å–ª–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, —Ç–æ
    if (ctx.message.text === "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
      await ctx.scene.enter("getStartUserName");
  }
  async onLocation(ctx) {
    ctx.session.baseConfig.location = ctx.message.location;
    await ctx.scene.enter("getStartUserName");
  }
})();

new (class getStartUserName extends Scene {
  constructor() {
    super("getStartUserName");
    super.struct = {
      enter: [[this.enter]]
    };
  }
  async enter(ctx) {
    ctx.session.baseConfig.name = ctx.from.first_name;
    ctx.session.baseConfig._id = ctx.from.id;
    console.log(ctx.session.baseConfig);
    await ctx.base.remove("config", { _id: ctx.from.id });
    await ctx.base.set("config", ctx.session.baseConfig);
    await ctx.scene.enter("Main");
  }
})();
